// <auto-generated />
using System;
using BettingAPI.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BettingAPI.DataContext.Migrations
{
    [DbContext(typeof(BettingContext))]
    partial class BettingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Bet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Event", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Match", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("MatchType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Odd", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialValueBet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.ToTable("Odds");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Sport", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.ChangeLogs.BetChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BetXmlId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BetChangeLogs");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.ChangeLogs.OddChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OddXmlId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialValueBet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("OddChangeLogs");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.BetHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<int>("MatchHistoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MatchStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MatchType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchHistoryId", "MatchType", "MatchStartDate");

                    b.ToTable("BetHistories");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.EventHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportHistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportHistoryId");

                    b.ToTable("EventHistories");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.MatchHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("MatchType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "MatchType", "StartDate");

                    b.HasIndex("EventHistoryId");

                    b.ToTable("MatchHistories");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.OddHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("BetHistoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialValueBet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "Value");

                    b.HasIndex("BetHistoryId");

                    b.ToTable("OddHistories");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.SportHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SportHistories");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.MatchChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchType")
                        .HasColumnType("int");

                    b.Property<int>("MatchXmlId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MatchChangeLogs");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Bet", b =>
                {
                    b.HasOne("BettingAPI.DataContext.Models.Active.Match", "Match")
                        .WithMany("Bets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Event", b =>
                {
                    b.HasOne("BettingAPI.DataContext.Models.Active.Sport", "Sport")
                        .WithMany("Events")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Match", b =>
                {
                    b.HasOne("BettingAPI.DataContext.Models.Active.Event", "Event")
                        .WithMany("Matches")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Odd", b =>
                {
                    b.HasOne("BettingAPI.DataContext.Models.Active.Bet", "Bet")
                        .WithMany("Odds")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.BetHistory", b =>
                {
                    b.HasOne("BettingAPI.DataContext.Models.History.MatchHistory", "MatchHistory")
                        .WithMany("BetHistories")
                        .HasForeignKey("MatchHistoryId", "MatchType", "MatchStartDate");

                    b.Navigation("MatchHistory");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.EventHistory", b =>
                {
                    b.HasOne("BettingAPI.DataContext.Models.History.SportHistory", "SportHistory")
                        .WithMany("EventHistories")
                        .HasForeignKey("SportHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportHistory");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.MatchHistory", b =>
                {
                    b.HasOne("BettingAPI.DataContext.Models.History.EventHistory", "EventHistory")
                        .WithMany("MatchHistories")
                        .HasForeignKey("EventHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventHistory");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.OddHistory", b =>
                {
                    b.HasOne("BettingAPI.DataContext.Models.History.BetHistory", "BetHistory")
                        .WithMany("OddHistories")
                        .HasForeignKey("BetHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BetHistory");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Bet", b =>
                {
                    b.Navigation("Odds");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Event", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Match", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.Active.Sport", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.BetHistory", b =>
                {
                    b.Navigation("OddHistories");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.EventHistory", b =>
                {
                    b.Navigation("MatchHistories");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.MatchHistory", b =>
                {
                    b.Navigation("BetHistories");
                });

            modelBuilder.Entity("BettingAPI.DataContext.Models.History.SportHistory", b =>
                {
                    b.Navigation("EventHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
